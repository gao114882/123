微服务架构6大核心点：
1. API Gateway 
2.进程间通信
3.服务注册发现
4.事件驱动的数据管理
5.微服务部署策略
6.微服务化改造

vscode for golang 插件: 

Code Runner 
Docker 
Git History
Git History Diff
GitLens
Go
vscode-icons
indent-rainbow


微服务中的流量控制和熔断降级

1. 流量控制: 在资源不变的情况下，系统所能提供的处理能力是有限的。而系统所面对的请求所到来的时间和量级往往是随机且不可控的。

因此就会存在可能出现突发性流量，而系统在没有任何的保护的情况下，很有可能会在数分钟内就无法提供正常服务。常见的前导现象是先出现调用延迟，接着持续出现饱和度上升，最终假死。

采用方法：基于 QPS、基于并发隔离
QPS: 在一定的时间窗口内按照特定的规则达到所设定的阈值则进行调控(sentinel-golang)

并发隔离: 使用协程池

2. 熔断降级： 在存在问题时，暂时切断内部调用，避免局部不稳定因素导致整个分布式系统的雪崩。

常见的有三种熔断降级措施：慢调用比例策略、错误比例策略、错误计数策略

慢调用比例：在所设定的时间窗口内，慢调用的比例大于所设置的阈值，则对接下来访问的请求进行自动熔断。

错误比例：在所设定的时间窗口内，调用的访问错误比例大于所设置的阈值，则对接下来访问的请求进行自动熔断。

错误计数：在所设定的时间窗口内，调用的访问错误次数大于所设置的阈值，则对接下来访问的请求进行自动熔断。
