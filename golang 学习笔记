微服务架构6大核心点：
1. API Gateway 
2.进程间通信
3.服务注册发现
4.事件驱动的数据管理
5.微服务部署策略
6.微服务化改造

vscode for golang 插件: 

Code Runner 
Docker 
Git History
Git History Diff
GitLens
Go
vscode-icons
indent-rainbow


微服务中的流量控制和熔断降级

1. 流量控制: 在资源不变的情况下，系统所能提供的处理能力是有限的。而系统所面对的请求所到来的时间和量级往往是随机且不可控的。

因此就会存在可能出现突发性流量，而系统在没有任何的保护的情况下，很有可能会在数分钟内就无法提供正常服务。常见的前导现象是先出现调用延迟，接着持续出现饱和度上升，最终假死。

采用方法：基于 QPS、基于并发隔离
QPS: 在一定的时间窗口内按照特定的规则达到所设定的阈值则进行调控(sentinel-golang)

并发隔离: 使用协程池

2. 熔断降级： 在存在问题时，暂时切断内部调用，避免局部不稳定因素导致整个分布式系统的雪崩。

常见的有三种熔断降级措施：慢调用比例策略、错误比例策略、错误计数策略

慢调用比例：在所设定的时间窗口内，慢调用的比例大于所设置的阈值，则对接下来访问的请求进行自动熔断。

错误比例：在所设定的时间窗口内，调用的访问错误比例大于所设置的阈值，则对接下来访问的请求进行自动熔断。

错误计数：在所设定的时间窗口内，调用的访问错误次数大于所设置的阈值，则对接下来访问的请求进行自动熔断。


流量控制使用的算法： 对应漏桶算法和令牌桶算法
1. 漏桶算法（Leaky Bucket）是网络中流量整形（Traffic Shaping）或速率限制（Rate Limiting）时常用的一种算法，它的主要目的是控制数据注入到网络的速率，平滑网络上的突发流量。
漏桶算法通过其算法调控了流量访问，使得突发流量可以被整形，去毛刺，变成一个相对缓和，以便为网络提供一个稳定的流量。

主要由三个参数定义，分别是：桶的容量、水从桶中流出的速率、桶的初始充满度。
简单来讲就是，一个漏桶，水流进来，但漏桶只有固定的流速来流出水，若容量满即拒绝，否则将持续保持流量流出。

2. 令牌桶算法也是网络中流量整形或速率限制时常用的一种算法，它的主要目的是控制发送到网络上的数据的数目，并允许突发数据的发送。
令牌桶算法会以一个恒定的速率向桶里放入令牌，如果有新的请求进来希望进行处理，则必须要先从桶内拿到一个可用的令牌，才能继续被处理。若桶内无令牌可取时，则拒绝请求/排队等待。

令牌桶限制的是流量的平均流入速率，并且允许一定程度的突然性流量，最大速率为桶的容量和生成 token 的速率。而漏桶限制的是流量的流出速率，是相对固定的。

漏桶算法的实现: https://github.com/uber-go/ratelimit
令牌桶的实现: https://github.com/juju/ratelimit


golang 边界检查
go build -gcflags="-d=ssa/check_bce/debug=1" example1.go

Go静态代码检查工具GolangCI-Lint 

CR(code Review) 
CL (Change List)
